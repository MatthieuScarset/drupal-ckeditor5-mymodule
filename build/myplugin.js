!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.CKEditor5=n():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.myplugin=n())}(self,(()=>(()=>{var __webpack_modules__={"./js/myplugin/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ckeditor5/src/utils */ \"ckeditor5/src/utils.js\");\n\n\n\n\n\n/**\n * Replace `MyPlugin` by your own plugin name.\n * Replace `myplugin` by your own class name.\n */\nclass MyPlugin extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [MyPluginEditing, MyPluginUI];\n  }\n}\n\nclass MyPluginCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute({ value }) {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n\n    editor.model.change(writer => {\n      // Create a <myplugin> element with the \"name\" attribute (and all the selection attributes)...\n      const myplugin = writer.createElement('myplugin', {\n        ...Object.fromEntries(selection.getAttributes()),\n        name: value\n      });\n\n      // ... and insert it into the document. Put the selection on the inserted element.\n      editor.model.insertObject(myplugin, null, null, { setSelection: 'on' });\n    });\n  }\n\n  refresh() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n\n    const isAllowed = model.schema.checkChild(selection.focus.parent, 'myplugin');\n\n    this.isEnabled = isAllowed;\n  }\n}\n\nclass MyPluginUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n    const t = editor.t;\n    const mypluginNames = editor.config.get('mypluginConfig.types');\n\n    // The \"myplugin\" dropdown must be registered among the UI components of the editor\n    // to be displayed in the toolbar.\n    editor.ui.componentFactory.add('myplugin', locale => {\n      const dropdownView = (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.createDropdown)(locale);\n\n      // Populate the list in the dropdown with items.\n      (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.addListToDropdown)(dropdownView, getDropdownItemsDefinitions(mypluginNames));\n\n      dropdownView.buttonView.set({\n        // The t() function helps localize the editor. All strings enclosed in t() can be\n        // translated and change when the language of the editor changes.\n        label: t('MyPlugin'),\n        tooltip: true,\n        withText: true\n      });\n\n      // Disable the myplugin button when the command is disabled.\n      const command = editor.commands.get('myplugin');\n      dropdownView.bind('isEnabled').to(command);\n\n      // Execute the command when the dropdown item is clicked (executed).\n      this.listenTo(dropdownView, 'execute', evt => {\n        editor.execute('myplugin', { value: evt.source.commandParam });\n        editor.editing.view.focus();\n      });\n\n      return dropdownView;\n    });\n  }\n}\n\nfunction getDropdownItemsDefinitions(mypluginNames) {\n  const itemDefinitions = new ckeditor5_src_utils__WEBPACK_IMPORTED_MODULE_3__.Collection();\n\n  for (const name of mypluginNames) {\n    const definition = {\n      type: 'button',\n      model: new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_2__.Model({\n        commandParam: name,\n        label: name,\n        withText: true\n      })\n    };\n\n    // Add the item definition to the collection.\n    itemDefinitions.add(definition);\n  }\n\n  return itemDefinitions;\n}\n\nclass MyPluginEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    console.log('MyPluginEditing#init() got called');\n\n    this._defineSchema();\n    this._defineConverters();\n\n    this.editor.commands.add('myplugin', new MyPluginCommand(this.editor));\n\n    this.editor.editing.mapper.on(\n      'viewToModelPosition',\n      (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.viewToModelPositionOutsideModelElement)(this.editor.model, viewElement => viewElement.hasClass('myplugin'))\n    );\n    this.editor.config.define('mypluginConfig', {\n      types: ['date', 'first name', 'surname']\n    });\n  }\n\n  _defineSchema() {\n    const schema = this.editor.model.schema;\n\n    schema.register('myplugin', {\n      // Behaves like a self-contained inline object (e.g. an inline image)\n      // allowed in places where $text is allowed (e.g. in paragraphs).\n      // The inline widget can have the same attributes as text (for example linkHref, bold).\n      inheritAllFrom: '$inlineObject',\n\n      // The myplugin can have many types, like date, name, surname, etc:\n      allowAttributes: ['name']\n    });\n  }\n\n  _defineConverters() {\n    const conversion = this.editor.conversion;\n\n    conversion.for('upcast').elementToElement({\n      view: {\n        name: 'span',\n        classes: ['myplugin']\n      },\n      model: (viewElement, { writer: modelWriter }) => {\n        // Extract the \"name\" from \"{name}\".\n        const name = viewElement.getChild(0).data.slice(1, -1);\n\n        return modelWriter.createElement('myplugin', { name });\n      }\n    });\n\n    conversion.for('editingDowncast').elementToElement({\n      model: 'myplugin',\n      view: (modelItem, { writer: viewWriter }) => {\n        const widgetElement = createMyPluginView(modelItem, viewWriter);\n\n        // Enable widget handling on a myplugin element inside the editing view.\n        return (0,ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.toWidget)(widgetElement, viewWriter);\n      }\n    });\n\n    conversion.for('dataDowncast').elementToElement({\n      model: 'myplugin',\n      view: (modelItem, { writer: viewWriter }) => createMyPluginView(modelItem, viewWriter)\n    });\n\n    // Helper method for both downcast converters.\n    function createMyPluginView(modelItem, viewWriter) {\n      const name = modelItem.getAttribute('name');\n\n      const mypluginView = viewWriter.createContainerElement('span', {\n        class: 'myplugin'\n      });\n\n      // Insert the myplugin name (as a text).\n      const innerText = viewWriter.createText('{' + name + '}');\n      viewWriter.insert(viewWriter.createPositionAt(mypluginView, 0), innerText);\n\n      return mypluginView;\n    }\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  MyPlugin,\n});\n\n//# sourceURL=webpack://CKEditor5.myplugin/./js/myplugin/index.js?")},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.myplugin/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.myplugin/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/utils.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/utils.js");\n\n//# sourceURL=webpack://CKEditor5.myplugin/delegated_./utils.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.myplugin/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/myplugin/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));